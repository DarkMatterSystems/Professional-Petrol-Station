
| Prof Petrol Station Scenario

trace all off
trace display on
trace events on
trace states on

initialise all

display all

| //! CUSTOMER Removes Gun From Pump 2
| private service PSC::CUSTOMER_Removes_Gun_From_Pump_2_1 () is
|   pump_instance : instance of PUMP;
|
| begin
|
|   //# Customer removes gun from pump 2's holster
|
|   pump_instance := find_one PUMP (Pump_Number = 2);
|   generate PUMP.Gun_Removed() to pump_instance;
| end service;

create event identifier Petrol_Station_Control Pump Gun_removed Pump_Identifier 2

| //! ATTENDENT Enables Pump 2
| private service PSC::ATTENDENT_Enables_Pump_2_2 () is
|
| begin
|   //# Attendent enables Pump number 2
|
|   generate DELIVERY.Create_Delivery(2);
| end service;

create event creation Petrol_Station_Control Delivery Create_delivery 2 20 34 20

| //! CUSTOMER Presses Trigger At Pump 2
| private service PSC::CUSTOMER_Presses_Trigger_At_Pump_2_3 () is
|   pump_instance : instance of PUMP;
|
| begin
|   //# Customer presses Gun trigger on pump 2
|
|   pump_instance := find_one PUMP (Pump_Number = 2);
|   generate PUMP.Trigger_Depressed() to pump_instance;
| end service;

create event identifier Petrol_Station_Control Pump Trigger_depressed Pump_Identifier 2

| //! METER Delivers Fuel Unit For Pump 2
| private service PSC::METER_Delivers_Fuel_Unit_For_Pump_2_4 () is
|   delivery_instance : instance of DELIVERY;
|
| begin
|   //# The delivery needs to be informed about each metered fuel delivery
|
|   delivery_instance := find_one DELIVERY (Pump_Number = 2);
|   generate DELIVERY.Fuel_Unit_Delivered() to delivery_instance;
| end service;

create event identifier Petrol_Station_Control Delivery Fuel_unit_delivered Delivery_Identifier 2

| //! CUSTOMER Releases Trigger At Pump 2
| private service PSC::CUSTOMER_Releases_Trigger_At_Pump_2_5 () is
|   pump_instance : instance of PUMP;
|
| begin
|   //# Customer releases Gun trigger on pump 2
|
|   pump_instance := find_one PUMP (Pump_Number = 2);
|   generate PUMP.Trigger_Released() to pump_instance;
| end service;

create event identifier Petrol_Station_Control Pump Trigger_released Pump_Identifier 2

| //! CUSTOMER Replaces Gun At Pump 2
| private service PSC::CUSTOMER_Replaces_Gun_At_Pump_2_6 () is
|   pump_instance : instance of PUMP;
|
| begin
|   //# Customer replaces gun in pump 2's holster
|
|   pump_instance := find_one PUMP (Pump_Number = 2);
|   generate PUMP.Gun_Replaced() to pump_instance;
| end service;

create event identifier Petrol_Station_Control Pump Gun_replaced Pump_Identifier 2

| //! CUSTOMER Absconds From Pump 2
| private service PSC::CUSTOMER_Absconds_From_Pump_2_8 () is
|   pump_instance : instance of PUMP;
|   current_pending_transaction : instance of PENDING_TRANSACTION;
|   current_transaction : instance of TRANSACTION;
|
| begin
|   //# Customer absconds from Pump 2 without paying
|
|   pump_instance := find_one PUMP (Pump_Number = 2);
|
|   current_pending_transaction := pump_instance->R9;
|
|   if current_pending_transaction /= null then
|     current_transaction := current_pending_transaction->R4;
|     generate TRANSACTION.Customer_Absconds("Details") to current_transaction;
|   end if;
| end service;

create event identifier Petrol_Station_Control Transaction Customer_absconds Transaction_Identifier 1 "Details"

| //! CUSTOMER Pays For Fuel For Pump 2
| private service PSC::CUSTOMER_Pays_For_Fuel_For_Pump_2_7 () is
|   pump_instance : instance of PUMP;
|   current_pending_transaction : instance of PENDING_TRANSACTION;
|   current_transaction : instance of TRANSACTION;
|
| begin
|   //# Customer pays for fuel for Pump 2
|
|   pump_instance := find_one PUMP (Pump_Number = 2);
|
|   current_pending_transaction := pump_instance->R9;
|
|   if current_pending_transaction /= null then
|     current_transaction := current_pending_transaction->R4;
|     generate TRANSACTION.Payment_Received() to current_transaction;
|   end if;
| end service;

create event identifier Petrol_Station_Control Transaction Payment_received Transaction_Identifier 1

| //! TANKER Delivery For Tank 1002
| private service PSC::TANKER_Delivery_For_Tank_1002_9 () is
|   tank_instance : instance of TANK;
|
| begin
|   //# Tanker driver fills tank 1002 with 10000
|
|   tank_instance := find_one TANK (Tank_Number = 1002);
|   generate TANK.Tanker_Delivery(10000.00) to tank_instance;
| end service;

create event identifier Petrol_Station_Control Tank Tanker_delivery Tank_Identifier 1002 10000.00

display all

host pause

exit

| Copyright (C) 2017 Dark Matter Systems Ltd. All rights reserved.

| Comment sections containing MASL are UK Crown Copyright.
